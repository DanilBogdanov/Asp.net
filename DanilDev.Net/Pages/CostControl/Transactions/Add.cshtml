@page "{Type?}"
@using DanilDev.Services.CostControl.Entity
@model DanilDev.Pages.CostControl.Transactions.AddModel
@{
    ViewData["Title"] = "Add Transaction";
}

<h2 id="heading">@ViewData["Title"]</h2>

<div class="row">
    <div class="col-sm-4">
        <form action="" method="post">
            <input id="referrer" type="hidden" name="referrer" />
            <script>
                referrer.value = document.referrer;
            </script>
            <hr />
            @*Transaction type*@
            <div id="transactionTypeGroup" class="form-group">
                <label>Transaction Type</label>
                <div>
                    <select id="transactionTypeSelect" name="transactionType" onchange="onSelectedType()">
                        <option selected disabled>Select Type</option>
                        @foreach (var type in Enum.GetValues<TransactionType>())
                        {
                            <option value=@type>@type</option>
                        }
                    </select>
                </div>
            </div>
            <script>
                function onSelectedType() {
                    selectType(transactionTypeSelect.value);
                }

                function selectType(type) {
                    switch (type) {
                        case "@TransactionType.Incoming.ToString()" :
                            selectIncomingType();
                            break;
                        case "@TransactionType.Outgoing.ToString()" :
                            selectOutgoingType();
                            break;
                        case "@TransactionType.Transfer.ToString()" :
                            selectTransferType();
                            break;
                        case "@TransactionType.Correction.ToString()" :
                            selectCorrectionType();
                            break;
                    }
                }

                function selectIncomingType() {
                    heading.innerText = "Add Incoming Transaction";
                    transactionTypeSelect.value = "@TransactionType.Incoming";

                    accountGroup.hidden = false;
                    accountFromGroup.hidden = true;
                    accountToGroup.hidden = false;
                    incomeGroup.hidden = false;
                    expenseGroup.hidden = true;
                    descriptionGroup.hidden = false;
                    amountGroup.hidden = false;
                        amountCorrectionInput.hidden = true;
                        transactionAmount.hidden = false;
                    buttonSubmit.hidden = false;
                 }
                function selectOutgoingType() {
                    heading.innerText = "Add Outgoing Transaction";
                    transactionTypeSelect.value = "@TransactionType.Outgoing";

                    accountGroup.hidden = false;
                    accountFromGroup.hidden = false;
                    accountToGroup.hidden = true;
                    incomeGroup.hidden = true;
                    expenseGroup.hidden = false;
                    descriptionGroup.hidden = false;
                    amountGroup.hidden = false;
                        amountCorrectionInput.hidden = true;
                        transactionAmount.hidden = false;
                    buttonSubmit.hidden = false;
                }
                function selectTransferType() {
                    heading.innerText = "Add Transfer Transaction";
                    transactionTypeSelect.value = "@TransactionType.Transfer";

                    accountGroup.hidden = false;
                    accountFromGroup.hidden = false;
                    accountToGroup.hidden = false;
                    incomeGroup.hidden = true;
                    expenseGroup.hidden = true;
                    descriptionGroup.hidden = false;
                    amountGroup.hidden = false;
                        amountCorrectionInput.hidden = true;
                        transactionAmount.hidden = false;
                    buttonSubmit.hidden = false;
                }
                function selectCorrectionType() {
                    heading.innerText = "Add Correction Transaction";
                    transactionTypeSelect.value = "@TransactionType.Correction";

                    accountGroup.hidden = false;
                    accountFromGroup.hidden = true;
                    accountToGroup.hidden = false;
                    incomeGroup.hidden = true;
                    expenseGroup.hidden = true;
                    descriptionGroup.hidden = false;
                    amountGroup.hidden = false;
                        amountCorrectionInput.hidden = false;
                        transactionAmount.hidden = true;
                    buttonSubmit.hidden = false;
                }
            </script>

            @*Account From-To*@
            <div id="accountGroup" class="form-group" hidden>
                <label>Account</label>
                <div class="btn-toolbar">
                    @*Acc From*@
                    <div id="accountFromGroup" class="input-group input-group-sm mr-2">
                        <div class="input-group-prepend">
                            <div class="input-group-text">From</div>
                        </div>
                        <select id="accountFromSelect" name="transactionAccountFromId">
                            <option selected disabled>Select Account</option>
                            @foreach (var accAndBal in @Model.AccountsWithBalance)
                            {
                                <option value=@accAndBal.account.Id data-balance=@accAndBal.balance>
                                    @accAndBal.account.Name: @accAndBal.balance
                                </option>
                            }
                        </select>
                    </div>
                    @*AccTo*@
                    <div id="accountToGroup" class="input-group input-group-sm" onchange="amountOfChanging()">
                        <div class="input-group-prepend">
                            <div class="input-group-text"> To </div>
                        </div>
                        <select id="accountToSelect" name="transactionAccountToId">
                            <option selected disabled>Select Account</option>
                            @foreach (var accAndBal in @Model.AccountsWithBalance)
                            {
                                <option value=@accAndBal.account.Id data-balance=@accAndBal.balance>
                                    @accAndBal.account.Name: @accAndBal.balance
                                </option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            @*Income*@
            <div id="incomeGroup" class="form-group" hidden>
                <label>Income</label>
                <div>
                    <select id="incomeSelect" name="transactionIncomeId">
                        <option selected disabled>Select Income</option>
                        @foreach (var income in @Model.Incomes)
                        {
                            <option value=@income.Id>@income.Name</option>
                        }
                    </select>
                </div>
            </div>
            @*Expense*@
            <div id="expenseGroup" class="form-group" hidden>
                <label>Expense</label>
                <div>
                    <select id="expenseSelect" name="transactionExpenseId">
                        <option selected disabled>Select Expense</option>
                        @foreach (var expense in @Model.Expenses)
                        {
                            <option value=@expense.Id>@expense.Name</option>
                        }
                    </select>
                </div>
            </div>
            @*Description*@
            <div id="descriptionGroup" class="form-group" hidden>
                <label>Description</label>
                <input name="transactionDescription" class="form-control" />
            </div>
            @*Amount*@
            <div id="amountGroup" class="form-group" onchange="amountOfChanging()" hidden>
                <label id="amountLabel">Amount</label>
                <input id="amountCorrectionInput" class="form-control" hidden/>
                <input id="transactionAmount" name="transactionAmount" hidden/>
                <label id="amountChangeLabel"></label>
            </div>

            @*If type is "correction" and account selected,  
            Calculate the difference between the current account and the new one. 
            Set the transaction form field and comment on how much the balance will change*@
            <script>
                function amountOfChanging() {
                    if (transactionTypeSelect.value == "@TransactionType.Correction.ToString()") {
                        if (accountToSelect.selectedIndex != 0) {
                            let currentBalance = accountToSelect.options[accountToSelect.selectedIndex].dataset.balance;
                            let differenceAmount = amountCorrectionInput.value - currentBalance;
                            @*Set amount of transaction*@
                            transactionAmount.value = differenceAmount;

                            if (differenceAmount < 0) {
                                amountChangeLabel.innerText = "Balance will decrease by " + (differenceAmount * -1);
                            } else {
                                amountChangeLabel.innerText = "Balance will increase by " + differenceAmount;
                            }
                        }
                    }
                }
            </script>
            @*Submit*@
            <button id="buttonSubmit" type="submit" class="btn btn-primary" hidden>Add Transaction</button>
            <script>
                if ("@Model.Type" != "") {
                    transactionTypeGroup.hidden = true;
                    selectType("@Model.Type");
                }
            </script>
        </form>
    </div>
</div>

