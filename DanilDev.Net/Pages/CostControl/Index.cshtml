@page "{handler?}/{interval?}"
@using DanilDev.Services.CostControl.Entity
@model DanilDev.Pages.CostControl.IndexModel
@{
    ViewData["Title"] = "CostControl";
}

<div>
    <div class="container-fluid">
        <div class="row">
            @*main*@
            <div class="col-sm-9">
                <div class="row">
                    <div class="col-sm-11 h4">
                        @if (@Model.AppUser == null)
                        {
                            <p>
                                <span class="font-weight-bold">This is Demo</span>(Authorize to see current data)
                            </p>
                        }
                    </div>
                    <div class="col-sm-1 text-sm-right font-italic font-weight-bold">v:0.0.1</div>
                </div>
            </div>

            @*Accounts*@
            <div class="col-sm-3 text-center shadow rounded pt-3">
                <span class="h5">Accounts:</span>
                <a type="button" href="CostControl/Accounts/Add" class="btn btn-outline-primary btn-sm float-right mb-2"><b>+</b></a>
                <table class="table">
                    <tbody>
                        @for (int i = 0; i < @Model.Accounts.Count(); i++)
                        {
                            <tr>
                                <td>
                                    <div title=@Model.Accounts[i].account.Description>@Model.Accounts[i].account.Name:</div>
                                </td>
                                <td>
                                    <b>@Model.Accounts[i].balance</b>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @*By Date*@
        <div class="row" hidden>
            <div class="btn-toolbar border-top border-success rounded" role="toolbar" aria-label="Toolbar with groups">
                <div id="dateButtonGroup" class="btn-group btn-group-toggle btn-group-sm shadow mr-1" data-toggle="buttons">
                    <label class="btn btn-outline-primary" onclick="byWeekClick()">
                        <input type="radio" name="options" id="byWeek" autocomplete="off"> Week
                    </label>
                    <label class="btn btn-outline-primary active" onclick="byMonthClick()">
                        <input type="radio" name="options" id="byMonth" autocomplete="off" onclick="byMonthClick()" checked> Month
                    </label>
                    <label class="btn btn-outline-primary" onclick="byPeriodClick()">
                        <input type="radio" name="options" id="byPeriod" autocomplete="off" onclick="byPeriodClick()"> Period
                    </label>
                </div>

                @*week*@
                <div class="input-group input-group-sm shadow" id="weekGroup" hidden>
                    <input id="weekInput" type="week" style='font-size:medium' class="form-control font-weight-bold text-success">
                </div>
                @*month*@
                <div class="input-group input-group-sm shadow" id="monthGroup">
                    <input id="monthInput" type="month" style='font-size:medium' class="form-control font-weight-bold text-dark">
                </div>
                @*period*@
                <div class="input-group input-group-sm" id="periodGroup" hidden>
                    <input id=periodFirstInput type="date" style='font-size:medium' class="form-control shadow font-weight-bold text-danger">-
                    <input id="periodSecondInput" type="date" style='font-size:medium' class="form-control shadow font-weight-bold text-primary">
                </div>

            </div>
            <script>
                function byWeekClick() {
                    weekGroup.hidden = false;
                    monthGroup.hidden = true;
                    periodGroup.hidden = true;
                }
                function byMonthClick() {
                    monthGroup.hidden = false;
                    weekGroup.hidden = true;
                    periodGroup.hidden = true;
                }
                function byPeriodClick() {
                    monthGroup.hidden = true;
                    weekGroup.hidden = true;
                    periodGroup.hidden = false;
                }
            </script>
        </div>
        <hr class="border-primary mb-0" />
        <div class="row shadow">
            @*Incomes*@
            <div class="col-md-3 text-center border-right border-primary pt-2">
                <span class="h5 pt-2">Incomes:</span>
                <a type="button" href="CostControl/Transactions/Add/@TransactionType.Incoming.ToString()" class="btn btn-outline-primary btn-sm float-right mb-2"><b>+</b></a>
                <table class="table">
                    <tbody>
                        @for (int i = 0; i < @Model.Incomes.Count(); i++)
                        {
                            <tr>
                                <td>
                                    <div title=@Model.Incomes[i].income.Description>@Model.Incomes[i].income.Name:</div>
                                </td>
                                <td>
                                    <b>@Model.Incomes[i].amount</b>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @*Expenses*@
            <div class="col-md-3 text-center border-right border-primary pt-2">
                <span class="h5">Expenses:</span>
                <a type="button" href="CostControl/Transactions/Add/@TransactionType.Outgoing.ToString()" class="btn btn-outline-primary btn-sm float-right mb-2"><b>+</b></a>
                <table class="table">
                    <tbody>
                        @for (int i = 0; i < @Model.Expenses.Count(); i++)
                        {
                            <tr>
                                <td>
                                    <div title=@Model.Expenses[i].expense.Description>@Model.Expenses[i].expense.Name:</div>
                                </td>
                                <td>
                                    <b>@Model.Expenses[i].amount</b>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @*Transactions*@
            <div class="col-md-6 text-center pt-2">
                <span class="h5">Transactions:</span>
                <a type="button" href="CostControl/Transactions/Add" class="btn btn-outline-primary btn-sm float-right mb-2"><b>+</b></a>
                <table class="table table-sm">
                    <tbody>
                        @for (int i = 0; i < @Model.Transactions.Count(); i++)
                        {
                            var transact = Model.Transactions[i];
                            @*set name in switch by type*@
                            string transactName = "";

                            <tr>
                                <td>
                                    <span title=@transact.Date.ToShortTimeString()>@transact.Date.ToShortDateString()</span>
                                </td>

                                <td class="text-left">
                                    @switch (transact.Type)
                                    {
                                        case TransactionType.Incoming:
                                            {
                                                <span class="badge badge-success">@transact.Type</span>
                                                transactName = transact.Income?.Name;
                                                break;
                                            }
                                        case TransactionType.Outgoing:
                                            {
                                                <span class="badge badge-danger">@transact.Type</span>
                                                transactName = transact.Expense?.Name;
                                                break;
                                            }
                                        case TransactionType.Transfer:
                                            {
                                                <span class="badge badge-primary">@transact.Type</span>
                                                transactName = $"{transact.AccountFrom?.Name} -> {transact.AccountTo?.Name}";
                                                break;
                                            }
                                        case TransactionType.Correction:
                                            {
                                                <span class="badge badge-secondary">@transact.Type</span>
                                                transactName = transact.AccountTo?.Name;
                                                break;
                                            }
                                    }

                                </td>
                                <td class="text-left">
                                    <span title=@transact.Description>@transactName</span>
                                </td>
                                <td>
                                    <b>@transact.Amount</b>
                                </td>
                                <td>
                                    <a type="button" href="" class="btn btn-outline-danger btn-sm float-right mb-2"><b>х</b></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>




</div>